Class "Profile";
----123456
----7890
---
---qwert---
---
  Import СИС2             Classes Переменные, Константы, Функции, ФункцииРТТИ, ФункцииДокумента, СтроковыеФункции;
  Import МашинаРеквизитов Classes Переменные, Библио;
  Import Базовый          Classes Переменные;
  Import Classes Константы,Переменные,ВосстановлениеБазы,Библио,Библ.процфунк;


InClass Public
НеПервыйЗап     :Boolean;
  proc PreInit;
    var QOsInf  :Query;
    var i       :integer;
    var локВерсияПроектаИзИнформационнойБазы :Numeric;
    Var ОбновляемыеЗаписи[]:String;
    var C:Class;
    var KatalogFile       :string;
    var VoprZP            :integer;
    var Q1                :Query;
    var КаталогЗарпЖурЛок :string;
    var АвтоОбновление    :Boolean;

    ОбновляемыеЗаписи=["ANALIT.ANALIT_BANK","ANALIT.ANALIT_KASS","ANALIT.ANALIT_MATR","ANALIT.ANALIT_MATR",
                                "ANALIT.ANALIT_OS","ANALIT.ANALIT_PROD","ANALIT.ANALIT_M_BOOK"];

    if КоличествоСчетовБыстро("(Match(Имя,'*21006*')and(Тип<>'МатериалЗабаланс'))")>0 then
     C = FindClass("Kernel.Счета");
     Библ.процфунк.фнУдалитьЗаписи(C,"(Match(Имя,'*21006*')and(Тип<>'МатериалЗабаланс'))");
    end;
--    БЮДЖЕТ_БУХГАЛТЕРИЯ.СЕРВИС.БлСервисныеФункции.КонвертацияРП;
    БЮДЖЕТ_БУХГАЛТЕРИЯ.СЕРВИС.БлСервисныеФункции.ОбработкаБанковскихРеквизитов;
--    БЮДЖЕТ_БУХГАЛТЕРИЯ.СЕРВИС.БлСервисныеФункции.ОбработкаПроцентаВозврата;
----------------------------------------------------------
    if НеПервыйЗап=false then
      QOsInf=Query.Create([SPRAV.OSN_INF]);
      QOsInf.Select;
      QOsInf.First;
      for i = 1..QOsInf.count do
        QOsInf.current.Edit;
        QOsInf.current.ОткрКарОСФильтр=true;
        QOsInf.current.АвтоНумерацияБО=true;
        QOsInf.current.Post;
        QOsInf.next;
      end;
      НеПервыйЗап=true;
    end;
--------------------------------------------------------
    Q1 = Query.Create([SPRAV.OSN_INF]);
    Q1.LoadingFieldsMode = СИС2.Константы.mdNone;
    Q1.Select;
    if Q1.Count = 0 then
      Message("Заполните основную информацию по организации");
    else
      if Q1.Count > 0 then
         if Q1.Count =1 then
          Q1.Current.ПоУмолч=истина;
          КаталогЗарпЖурЛок=Q1.current.КаталогЗарпЖур;
          АвтоОбновление = Q1.current.АвтоОбновление;
         elsif  Q1.Count >1  then
          Q1.Filter = "ПоУмолч=истина";
          if Q1.count>0 then
            Q1.Last;
            if Q1.Current <> nil then
              КаталогЗарпЖурЛок=Q1.current.КаталогЗарпЖур;
              АвтоОбновление = Q1.current.АвтоОбновление;
            end;
          end;
         end;
      end;
    end;
    if АвтоОбновление then
      AutoUpdateProject;
    end;
    if КаталогЗарпЖурЛок<>nil then
      KatalogFile=SubStr(КаталогЗарпЖурЛок,1,Length(КаталогЗарпЖурЛок)-1);
      БЮДЖЕТ_БУХГАЛТЕРИЯ.СЕРВИС.БлСервисныеФункции.ZagruzkaZarPl(KatalogFile);
    else
      if SessionInfo.SharedFolder=nil then
        KatalogFile=Delete(Insert('Data',SessionInfo.LocalFolder+'Shared',Pos('Users',SessionInfo.LocalFolder)),Pos('Users',Insert('Data',SessionInfo.LocalFolder+'Shared',Pos('Users',SessionInfo.LocalFolder))),19)+"\";
      else
        KatalogFile=SessionInfo.SharedFolder+"\";
      end;
      VoprZP=ВопрДаНетОтказ("Внимание, изменился способ загрузки проводок из зарплаты! По умолчанию будет использоваться каталог: "+str(KatalogFile)+" Желаете его изменить?");
      if VoprZP=кмдДа and Q1.Count<>nil then
        ВыборПапки(КаталогЗарпЖурЛок,'Укажите каталог куда выгружаются зарплатные проводки');
        Q1.current.Edit;
        Q1.current.КаталогЗарпЖур=КаталогЗарпЖурЛок;
        Q1.current.Post;
        KatalogFile=SubStr(КаталогЗарпЖурЛок,1,Length(КаталогЗарпЖурЛок)-1);
        БЮДЖЕТ_БУХГАЛТЕРИЯ.СЕРВИС.БлСервисныеФункции.ZagruzkaZarPl(KatalogFile);
      elsif VoprZP=кмдНет and Q1.Count<>nil then
        КаталогЗарпЖурЛок=KatalogFile;
        Q1.current.Edit;
        Q1.current.КаталогЗарпЖур=КаталогЗарпЖурЛок;
        Q1.current.Post;
        KatalogFile=SubStr(КаталогЗарпЖурЛок,1,Length(КаталогЗарпЖурЛок)-1);
        БЮДЖЕТ_БУХГАЛТЕРИЯ.СЕРВИС.БлСервисныеФункции.ZagruzkaZarPl(KatalogFile);
      elsif VoprZP=кмдОтказ   then
        Trace("Автоматическая загрузка проводок из зарплаты не производилась");
      end;
    end;
    Q1.Close;
--------------------------------------------------------
     if КоличествоСчетовБыстро("")=0 or КоличествоСчетовБыстро("")=1 then
           ЗагрузитьФайлВосстановления(BaseInfo.ProjectByName[Self.ClassProject].Folder + 'Shared\Import\БухСчета.tbc',
                                "Счета бухгалтерского учета");
     end;
        if CountSmart( OpenWorcQuery("SLUG.Rasxodi1","","Инстр='190Н'") )=0
          and CountSmart( OpenWorcQuery("SLUG.Rasxodi2","","Инстр='190Н'") )=0
          and CountSmart( OpenWorcQuery("SLUG.Rasxodi3","","Инстр='190Н'") )=0 
          and CountSmart( OpenWorcQuery("SLUG.DOXODI","","Инстр='190Н'") )=0
          and CountSmart( OpenWorcQuery("SLUG.Istocniki","","Инстр='190Н'") )=0 then
            ВосстановлениеБазы.Загрузить_Доходы;
            ВосстановлениеБазы.Загрузить_Источники;
            ВосстановлениеБазы.Загрузить_Расходы1;
            ВосстановлениеБазы.Загрузить_Расходы2;
            ВосстановлениеБазы.Загрузить_Расходы3;
        end;
        if CountSmart( OpenWorcQuery("SLUG.Rasxodi1","","Инстр='65Н'") )=0
          and CountSmart( OpenWorcQuery("SLUG.Rasxodi2","","Инстр='65Н'") )=0
          and CountSmart( OpenWorcQuery("SLUG.Rasxodi3","","Инстр='65Н'") )=0
          and CountSmart( OpenWorcQuery("SLUG.DOXODI","","Инстр='65Н'") )=0
          and CountSmart( OpenWorcQuery("SLUG.Istocniki","","Инстр='65Н'") )=0 then
            ВосстановлениеБазы.ЗагрузитьКБК65Н;
        end;
        if BaseInfo.ProjectByName["БюджетБухгалтерия"].SubCode>16000 and BaseInfo.ProjectByName["БюджетБухгалтерия"].SubCode<=16127 then
          ВосстановлениеБазы.ЗагрузитьКБК65Н_ПоКОСГУ;
        end;
        if CountSmart( OpenWorcQuery("Прочие.КонтрольныеСоотношения","","") )=0 then
           ВосстановлениеБазы.ЗагрузитьКонтрольныеСоотн;
        end;
        if BaseInfo.ProjectByName["БюджетБухгалтерия"].SubCode<16000 then
           if CountSmart( OpenWorcQuery("SLUG.DOXODI","","Инстр='180Н'") )=0 then
            Библио.ОбновитьКартотекуИзТекстФайла("Доходы180Н","SLUG.DOXODI","Инстр='180Н'");
            ДобавитьИмяИнструкции("SLUG.DOXODI",'180Н');
           end;
           if CountSmart( OpenWorcQuery("SLUG.Istocniki","","Инстр='180Н'") )=0 then
            Библио.ОбновитьКартотекуИзТекстФайла("Источники180Н","SLUG.Istocniki","Инстр='180Н'");
            ДобавитьИмяИнструкции("SLUG.Istocniki",'180Н');
           end;
           if CountSmart( OpenWorcQuery("SLUG.Rasxodi1","","Инстр='180Н'") )=0 then
            Библио.ОбновитьКартотекуИзТекстФайла("РазделыПодразделы180Н","SLUG.Rasxodi1","Инстр='180Н'");
            ДобавитьИмяИнструкции("SLUG.Rasxodi1",'180Н');
           end;
           if CountSmart( OpenWorcQuery("SLUG.Rasxodi2","","Инстр='180Н'") )=0 then
            Библио.ОбновитьКартотекуИзТекстФайла("ЦелевыеСтатьи180Н","SLUG.Rasxodi2","Инстр='180Н'");
            ДобавитьИмяИнструкции("SLUG.Rasxodi2",'180Н');
           end;
           if CountSmart( OpenWorcQuery("SLUG.Rasxodi3","","Инстр='180Н'") )=0 then
            Библио.ОбновитьКартотекуИзТекстФайла("ВидыРасходов180Н","SLUG.Rasxodi3","Инстр='180Н'");
            ДобавитьИмяИнструкции("SLUG.Rasxodi3",'180Н');
           end;
           if CountSmart( OpenWorcQuery("SLUG.Rasxodi4","","Инстр='180Н'") )=0 then
            Библио.ОбновитьКартотекуИзТекстФайла("ПрограммыПодпрограммы180Н","SLUG.Rasxodi4","Инстр='180Н'");
            ДобавитьИмяИнструкции("SLUG.Rasxodi4",'180Н');
           end;
        end;

        if CountSmart( OpenWorcQuery("SLUG.ANALIT_KOD_GRUPP","","") )=0 then
           ВосстановлениеБазы.Загрузить_ВидИмущества;
        end;
        if CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","") )=0 then
           ВосстановлениеБазы.Загрузить_ЕдиныйПлСчетов;
        end;
        if CountSmart( OpenWorcQuery("SLUG.ТаблицаСоответствия","","") )=0 then
           ВосстановлениеБазы.Загрузить_ТаблСоотв;
        end;
        if CountSmart( OpenWorcQuery("SLUG.Вид_Учр","","") )=0 then
           ВосстановлениеБазы.Загрузить_ВидыУчрежд;
        end;
        if CountSmart( OpenWorcQuery("Прочие.РегКлассификация","","") )=0 or 
           CountSmart( OpenWorcQuery("Прочие.РегКлассификация","НАИМЕНОВАНИЕ","НАИМЕНОВАНИЕ=''"))<>0 then
           ВосстановлениеБазы.ЗагрузитьСправДопРегКласс;
        end;
        if CountSmart(OpenWorcQuery("OPR.OPR_BANK","",сложитьСтрокиФильтраПоИ(["Инстр148Н=истина","isGroup=0"])))=0
           and CountSmart( OpenWorcQuery("OPR.OPR_KASS","",сложитьСтрокиФильтраПоИ(["Инстр148Н=истина","isGroup=0"])))=0
           and CountSmart( OpenWorcQuery("OPR.OPR_MATR","",сложитьСтрокиФильтраПоИ(["Инстр148Н=истина","isGroup=0"])))=0
           and CountSmart( OpenWorcQuery("OPR.OPR_OS","",сложитьСтрокиФильтраПоИ(["Инстр148Н=истина","isGroup=0"])))=0
           and CountSmart( OpenWorcQuery("OPR.OPR_PROD","",сложитьСтрокиФильтраПоИ(["Инстр148Н=истина","isGroup=0"])))=0
           and CountSmart( OpenWorcQuery("OPR.OPR_M_BOOK","",сложитьСтрокиФильтраПоИ(["Инстр148Н=истина","isGroup=0"])))=0 then
             ВосстановлениеБазы.НастройкаКартотекНа148Н;
        end;

        if CountSmart(OpenWorcQuery("OPR.OPR_BANK","",сложитьСтрокиФильтраПоИ(["Инстр162Н=истина","Инстр174Н=истина","isGroup=0"])))<>0
           and CountSmart( OpenWorcQuery("OPR.OPR_KASS","",сложитьСтрокиФильтраПоИ(["Инстр162Н=истина","Инстр174Н=истина","isGroup=0"])))<>0
           and CountSmart( OpenWorcQuery("OPR.OPR_MATR","",сложитьСтрокиФильтраПоИ(["Инстр162Н=истина","Инстр174Н=истина","isGroup=0"])))<>0
           and CountSmart( OpenWorcQuery("OPR.OPR_OS","",сложитьСтрокиФильтраПоИ(["Инстр162Н=истина","Инстр174Н=истина","isGroup=0"])))<>0
           and CountSmart( OpenWorcQuery("OPR.OPR_PROD","",сложитьСтрокиФильтраПоИ(["Инстр162Н=истина","Инстр174Н=истина","isGroup=0"])))<>0
           and CountSmart( OpenWorcQuery("OPR.OPR_M_BOOK","",сложитьСтрокиФильтраПоИ(["Инстр162Н=истина","Инстр174Н=истина","isGroup=0"])))<>0 then
             ВосстановлениеБазы.РазъединитьИнстр162Н;
        end;

        if CountSmart(OpenWorcQuery("OPR.OPR_BANK","","Инстр183Н=истина"))=0
           or CountSmart( OpenWorcQuery("OPR.OPR_KASS","","Инстр183Н=истина"))=0
           or CountSmart( OpenWorcQuery("OPR.OPR_MATR","","Инстр183Н=истина"))=0
           or CountSmart( OpenWorcQuery("OPR.OPR_OS","","Инстр183Н=истина"))=0
           or CountSmart( OpenWorcQuery("OPR.OPR_PROD","","Инстр183Н=истина"))=0
           or CountSmart( OpenWorcQuery("OPR.OPR_M_BOOK","","Инстр183Н=истина"))=0 then
             ВосстановлениеБазы.Загрузить_Операции183Н;
        end;
        if CountSmart(OpenWorcQuery("OPR.OPR_BANK","","Инстр174Н=истина"))=0
           or CountSmart( OpenWorcQuery("OPR.OPR_KASS","","Инстр174Н=истина"))=0
           or CountSmart( OpenWorcQuery("OPR.OPR_MATR","","Инстр174Н=истина"))=0
           or CountSmart( OpenWorcQuery("OPR.OPR_OS","","Инстр174Н=истина"))=0
           or CountSmart( OpenWorcQuery("OPR.OPR_PROD","","Инстр174Н=истина"))=0
           or CountSmart( OpenWorcQuery("OPR.OPR_M_BOOK","","Инстр174Н=истина"))=0 then
             ВосстановлениеБазы.Загрузить_Операции174Н;
        end;

        if CountSmart(OpenWorcQuery("OPR.OPR_BANK","","Инстр162Н=истина"))=0
           or CountSmart( OpenWorcQuery("OPR.OPR_KASS","","Инстр162Н=истина"))=0
           or CountSmart( OpenWorcQuery("OPR.OPR_MATR","","Инстр162Н=истина"))=0
           or CountSmart( OpenWorcQuery("OPR.OPR_OS","","Инстр162Н=истина"))=0
           or CountSmart( OpenWorcQuery("OPR.OPR_PROD","","Инстр162Н=истина"))=0
           or CountSmart( OpenWorcQuery("OPR.OPR_M_BOOK","","Инстр162Н=истина"))=0 then
             ВосстановлениеБазы.Загрузить_Операции162Н;
        end;

        if CountSmart(OpenWorcQuery("OPR.OPR_BANK","","isGroup=-1"))>0
           and CountSmart( OpenWorcQuery("OPR.OPR_KASS","","isGroup=-1"))>0
           and CountSmart( OpenWorcQuery("OPR.OPR_MATR","","isGroup=-1"))>0
           and CountSmart( OpenWorcQuery("OPR.OPR_OS","","isGroup=-1"))>0
           and CountSmart( OpenWorcQuery("OPR.OPR_PROD","","isGroup=-1"))>0
           and CountSmart( OpenWorcQuery("OPR.OPR_M_BOOK","","isGroup=-1"))>0 then
             ВосстановлениеБазы.НастройкаГрупЗаписейКартотекНа148Н;
        end;



        --if CountSmart(OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","Match(СинтетичКОД, '5*')"))=0 then
        --    ВосстановлениеБазы.Загрузить_ЕдиныйПлСчетовСанкционирование;
        --end;

--    if КоличествоСчетовБыстро("Match(Имя,'50611')")=1 then
--     C = FindClass("Kernel.Счета");
--     Библ.процфунк.фнУдалитьЗаписи(C,"Имя='50611'");
--    end;
--    if КоличествоСчетовБыстро("Match(Имя,'?????')")<>0 then
--     C = FindClass("Kernel.Счета");
--     Библ.процфунк.фнУдалитьЗаписи(C,"Match(Имя, '?????')");
--    end;
--    if КоличествоСчетовБыстро("Match(Имя,'???')")<>0 then
--     C = FindClass("Kernel.Счета");
--     Библ.процфунк.фнУдалитьЗаписи(C,"Match(Имя, '???')");
--    end;
    if КоличествоСчетовБыстро("Match(Имя,'?202?????')")<>0 then
     C = FindClass("Kernel.Счета");
     Библ.процфунк.фнУдалитьЗаписи(C,"Match(Имя, '?202?????')");
    end;
    if КоличествоСчетовБыстро("Match(Имя,'?203?????')")<>0 then
     C = FindClass("Kernel.Счета");
     Библ.процфунк.фнУдалитьЗаписи(C,"Match(Имя, '?203?????')");
    end;
    if КоличествоСчетовБыстро("Match(Имя,'?211?????')")<>0 then
     C = FindClass("Kernel.Счета");
     Библ.процфунк.фнУдалитьЗаписи(C,"Match(Имя, '?211?????')");
    end;
    if КоличествоСчетовБыстро("Match(Имя,'?212?????')")<>0 then
     C = FindClass("Kernel.Счета");
     Библ.процфунк.фнУдалитьЗаписи(C,"Match(Имя, '?212?????')");
    end;
    if КоличествоСчетовБыстро("Match(Имя,'?305?????')")<>0 then
     C = FindClass("Kernel.Счета");
     Библ.процфунк.фнУдалитьЗаписи(C,"Match(Имя, '?305?????')");
    end;
    if КоличествоСчетовБыстро("Match(Имя,'?306?????')")<>0 then
     C = FindClass("Kernel.Счета");
     Библ.процфунк.фнУдалитьЗаписи(C,"Match(Имя, '?306?????')");
    end;
    if КоличествоСчетовБыстро("Match(Имя,'?307?????')")<>0 then
     C = FindClass("Kernel.Счета");
     Библ.процфунк.фнУдалитьЗаписи(C,"Match(Имя, '?307?????')");
    end;
    if КоличествоСчетовБыстро("Match(Имя,'?308?????')")<>0 then
     C = FindClass("Kernel.Счета");
     Библ.процфунк.фнУдалитьЗаписи(C,"Match(Имя, '?308?????')");
    end;
    if КоличествоСчетовБыстро("Match(Имя,'?309?????')")<>0 then
     C = FindClass("Kernel.Счета");
     Библ.процфунк.фнУдалитьЗаписи(C,"Match(Имя, '?309?????')");
    end;
    if КоличествоСчетовБыстро("Match(Имя,'?402?????')")<>0 then
     C = FindClass("Kernel.Счета");
     Библ.процфунк.фнУдалитьЗаписи(C,"Match(Имя, '?402?????')");
    end;
--    if КоличествоСчетовБыстро("Match(Имя,'?50126???')")<>0 then
--     C = FindClass("Kernel.Счета");
--     Библ.процфунк.фнУдалитьЗаписи(C,"Match(Имя, '?50126???')");
--    end;
--    if КоличествоСчетовБыстро("Match(Имя,'?50136???')")<>0 then
--     C = FindClass("Kernel.Счета");
--     Библ.процфунк.фнУдалитьЗаписи(C,"Match(Имя, '?50136???')");
--    end;
--    if КоличествоСчетовБыстро("Match(Имя,'?50146???')")<>0 then
--     C = FindClass("Kernel.Счета");
--     Библ.процфунк.фнУдалитьЗаписи(C,"Match(Имя, '?50146???')");
--    end;
--    if КоличествоСчетовБыстро("Match(Имя,'?50326???')")<>0 then
--     C = FindClass("Kernel.Счета");
--     Библ.процфунк.фнУдалитьЗаписи(C,"Match(Имя, '?50326???')");
--    end;
--    if КоличествоСчетовБыстро("Match(Имя,'?50336???')")<>0 then
--     C = FindClass("Kernel.Счета");
--     Библ.процфунк.фнУдалитьЗаписи(C,"Match(Имя, '?50336???')");
--    end;
--    if КоличествоСчетовБыстро("Match(Имя,'?50346???')")<>0 then
--     C = FindClass("Kernel.Счета");
--     Библ.процфунк.фнУдалитьЗаписи(C,"Match(Имя, '?50346???')");
--    end;

    if CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='МатериалЗабаланс')and(СинтетичКОД='210')and(КОДГруппы='0')and(КОДВида='6')"))=0 
       or КоличествоСчетовБыстро("(Match(Имя,'*21006*')and(Тип='МатериалЗабаланс'))")=0 then
      ВосстановлениеБазы.ИзменитьтипСчета('МатериалЗабаланс',"(СинтетичКОД='210')and(КОДГруппы='0')and(КОДВида='6')","21006");
    end;
    if КоличествоСчетовБыстро("(Match(Имя,'*20981*')and(Тип='ОснСредства'))")<>0 then
      ВосстановлениеБазы.ИзменитьтипСчета('Банк',"(СинтетичКОД='209')and(КОДГруппы='8')and(КОДВида='1')","20981");
    end;
    if КоличествоСчетовБыстро("(Match(Имя,'*20982*')and(Тип='ОснСредства'))")<>0 then
      ВосстановлениеБазы.ИзменитьтипСчета('Банк',"(СинтетичКОД='209')and(КОДГруппы='8')and(КОДВида='2')","20982");
    end;
    if КоличествоСчетовБыстро("(Match(Имя,'*20983*')and(Тип='ОснСредства'))")<>0 then
      ВосстановлениеБазы.ИзменитьтипСчета('Банк',"(СинтетичКОД='209')and(КОДГруппы='8')and(КОДВида='2')","20983");
    end;
--    if CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='501')and(КОДГруппы='1')and(КОДВида='1')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='501')and(КОДГруппы='2')and(КОДВида='1')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='501')and(КОДГруппы='3')and(КОДВида='1')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='501')and(КОДГруппы='4')and(КОДВида='1')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='501')and(КОДГруппы='1')and(КОДВида='2')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='501')and(КОДГруппы='2')and(КОДВида='2')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='501')and(КОДГруппы='3')and(КОДВида='2')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='501')and(КОДГруппы='4')and(КОДВида='2')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='501')and(КОДГруппы='1')and(КОДВида='3')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='501')and(КОДГруппы='2')and(КОДВида='3')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='501')and(КОДГруппы='3')and(КОДВида='3')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='501')and(КОДГруппы='4')and(КОДВида='3')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='501')and(КОДГруппы='1')and(КОДВида='4')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='501')and(КОДГруппы='2')and(КОДВида='4')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='501')and(КОДГруппы='3')and(КОДВида='4')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='501')and(КОДГруппы='4')and(КОДВида='4')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='501')and(КОДГруппы='1')and(КОДВида='5')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='501')and(КОДГруппы='2')and(КОДВида='5')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='501')and(КОДГруппы='3')and(КОДВида='5')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='501')and(КОДГруппы='4')and(КОДВида='5')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='501')and(КОДГруппы='1')and(КОДВида='6')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='501')and(КОДГруппы='2')and(КОДВида='6')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='501')and(КОДГруппы='3')and(КОДВида='6')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='501')and(КОДГруппы='4')and(КОДВида='6')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='501')and(КОДГруппы='1')and(КОДВида='9')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='501')and(КОДГруппы='2')and(КОДВида='9')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='501')and(КОДГруппы='3')and(КОДВида='9')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='501')and(КОДГруппы='4')and(КОДВида='9')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='502')and(КОДГруппы='1')and(КОДВида='1')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='502')and(КОДГруппы='2')and(КОДВида='1')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='502')and(КОДГруппы='3')and(КОДВида='1')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='502')and(КОДГруппы='4')and(КОДВида='1')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='502')and(КОДГруппы='1')and(КОДВида='2')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='503')and(КОДГруппы='1')and(КОДВида='1')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='503')and(КОДГруппы='2')and(КОДВида='1')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='503')and(КОДГруппы='3')and(КОДВида='1')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='503')and(КОДГруппы='4')and(КОДВида='1')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='503')and(КОДГруппы='1')and(КОДВида='2')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='503')and(КОДГруппы='2')and(КОДВида='2')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='503')and(КОДГруппы='3')and(КОДВида='2')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='503')and(КОДГруппы='4')and(КОДВида='2')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='503')and(КОДГруппы='1')and(КОДВида='3')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='503')and(КОДГруппы='2')and(КОДВида='3')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='503')and(КОДГруппы='3')and(КОДВида='3')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='503')and(КОДГруппы='4')and(КОДВида='3')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='503')and(КОДГруппы='1')and(КОДВида='4')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='503')and(КОДГруппы='2')and(КОДВида='4')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='503')and(КОДГруппы='3')and(КОДВида='4')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='503')and(КОДГруппы='4')and(КОДВида='4')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='503')and(КОДГруппы='1')and(КОДВида='5')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='503')and(КОДГруппы='2')and(КОДВида='5')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='503')and(КОДГруппы='3')and(КОДВида='5')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='503')and(КОДГруппы='4')and(КОДВида='5')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='503')and(КОДГруппы='1')and(КОДВида='6')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='503')and(КОДГруппы='2')and(КОДВида='6')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='503')and(КОДГруппы='3')and(КОДВида='6')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='503')and(КОДГруппы='4')and(КОДВида='6')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='503')and(КОДГруппы='1')and(КОДВида='9')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='503')and(КОДГруппы='2')and(КОДВида='9')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='503')and(КОДГруппы='3')and(КОДВида='9')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='503')and(КОДГруппы='4')and(КОДВида='9')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='504')and(КОДГруппы='1')and(КОДВида='0')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='504')and(КОДГруппы='2')and(КОДВида='0')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='506')and(КОДГруппы='1')and(КОДВида='0')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='506')and(КОДГруппы='2')and(КОДВида='0')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='507')and(КОДГруппы='1')and(КОДВида='0')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='507')and(КОДГруппы='2')and(КОДВида='0')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='508')and(КОДГруппы='1')and(КОДВида='0')"))=0
--       or CountSmart( OpenWorcQuery("Прочие.ЕдиныйПлСчетов","","(ТипСчета='БазовыйСчетБух')and(СинтетичКОД='508')and(КОДГруппы='2')and(КОДВида='0')"))=0
--       then
--       Библио.ОбновитьСчетаСанкционированияЕПС("Shared\Import\ЕПССчетаСанкционирования.txt");
--    end;
    if CountSmart(OpenWorcQuery("SLUG.ДМС","","Код=''"))<>0 then
     C = FindClass("БюджетБухгалтерия.SLUG.ДМС");
     Библ.процфунк.фнУдалитьЗаписи(C,"Код=''");
    end;
    if CountSmart(OpenWorcQuery("ANALIT.ANL_BANK","","Код='РЕОРГАНИЗАЦИЯ'"))=0 or
       CountSmart(OpenWorcQuery("ANALIT.ANL_BANK","","Код='ПРОЧИЕ_ИЗМЕНЕНИЯ'"))=0 or
       CountSmart(OpenWorcQuery("ANALIT.ANL_BANK","","Код='ПЕРЕОЦЕНКА2007'"))=0  or
       CountSmart(OpenWorcQuery("ANALIT.ANL_BANK","","Код='ИЗМЕНЕНИЕ_ТИПА_УЧР'"))=0 or
       CountSmart(OpenWorcQuery("ANALIT.ANL_BANK","","Код='КорректировкаБО'"))=0 or
       CountSmart(OpenWorcQuery("ANALIT.ANL_BANK","","Код='ИЗМЕН_АНАЛИТ'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.ANALIT_KOD_GRUPP","","Код='1'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.ANALIT_KOD_GRUPP","","Код='2'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.ANALIT_KOD_GRUPP","","Код='3'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.ANALIT_KOD_GRUPP","","Код='4'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.ANALIT_KOD_GRUPP","","Код='5'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.ANALIT_KOD_GRUPP","","Код='6'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.ANALIT_KOD_GRUPP","","Код='7'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.Вид_Учр","","Код='1'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.Вид_Учр","","Код='2'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.Вид_Учр","","Код='3'"))=0 or
       CountSmart(OpenWorcQuery("SPR.ТИП_ОПЕР","","Код='НЕКАС_ОПЕР'"))=0 or
       CountSmart(OpenWorcQuery("SPR.ТИП_ОПЕР","","Код='ИЗМЕН_ГРУПП_НФА'"))=0 or
       CountSmart(OpenWorcQuery("SPR.ТИП_ОПЕР","","Код='ИзменениеКБК'"))=0 or
--       спрЕдИзм.ОткрытьПоИмени('шт')=nil or
       CountSmart(OpenWorcQuery("SLUG.Вид_Вложения","","Код='01'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.Вид_Вложения","","Код='02'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.Вид_Вложения","","Код='03'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.Вид_Вложения","","Код='04'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.Вид_Вложения","","Код='05'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.Вид_Вложения","","Код='06'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.Вид_Вложения","","Код='07'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.Вид_Вложения","","Код='08'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.Вид_Вложения","","Код='09'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.Вид_Вложения","","Код='10'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.Вид_Вложения","","Код='31'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.Вид_Вложения","","Код='32'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.Вид_Вложения","","Код='33'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.Вид_Вложения","","Код='34'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.Вид_Вложения","","Код='35'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.Вид_Вложения","","Код='36'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.Вид_Вложения","","Код='37'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.Вид_Вложения","","Код='38'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.Вид_Вложения","","Код='39'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.Вид_Вложения","","Код='30'"))=0 or
       CountSmart(OpenWorcQuery("SPR.ФОНД","","Код='СПИСОК1'"))=0 or
       CountSmart(OpenWorcQuery("SPR.ФОНД","","Код='СПИСОК2'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.ВидЗадолженностиЗабаланс","","Код='задаток'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.ВидЗадолженностиЗабаланс","","Код='залог'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.ВидЗадолженностиЗабаланс","","Код='гарантия'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.ВидЗадолженностиЗабаланс","","Код='поручительство'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.VID_DOC","","Код='Ф0504101'"))=0 or 
       CountSmart(OpenWorcQuery("SLUG.VID_DOC","","Код='Ф0504102'"))=0 or 
       CountSmart(OpenWorcQuery("SLUG.VID_DOC","","Код='Ф0504103'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.VID_DOC","","Код='Ф0504104'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.VID_DOC","","Код='Ф0504105'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.VID_DOC","","Код='Ф0504204'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.VID_DOC","","Код='Ф0504205'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.VID_DOC","","Код='Ф0504206'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.VID_DOC","","Код='Ф0504207'"))=0 or
       CountSmart(OpenWorcQuery("SLUG.VID_DOC","","Код='Ф0504220'"))=0 then

--       CountSmart(OpenWorcQuery("Прочие.РегКлассификация","",""))=0 then
       ВосстановлениеБазы.ДобавитьОбязательнуюАналитику;
    end;
    for i = 1..ДлинаМассива(ОбновляемыеЗаписи) do
      QOsInf=OpenWorcQuery(ОбновляемыеЗаписи[i],"ГРУППА",СложитьСтрокиФильтраПоИЛИ(["ГРУППА='Дебитор_Кредитор'","ГРУППА='Подотч_лицо'"],истина));

      if CountSmart(QOsInf)<>0 and CountSmart(OpenWorcQuery(ОбновляемыеЗаписи[i],"ГРУППА","ГРУППА='ДО'"))=0 then
       Библио.ОбновитьПривязкуАналитикиКлонированием(ОбновляемыеЗаписи[i],"","ГРУППА","ДО","Денежное обязательство",'Дебитор_Кредитор');
       Библио.ОбновитьПривязкуАналитикиКлонированием(ОбновляемыеЗаписи[i],"","ГРУППА","ДО","Денежное обязательство",'Подотч_лицо');
      end;
      QOsInf=OpenWorcQuery(ОбновляемыеЗаписи[i],"ГРУППА",СложитьСтрокиФильтраПоИ(["Match(КРЕДИТ, '*20134*') и Match(ДЕБЕТ, '*20134*')", "ГРУППА = 'КОСГУ'"]));
      if CountSmart(QOsInf)=0 and ОбновляемыеЗаписи[i] in ["ANALIT.ANALIT_BANK","ANALIT.ANALIT_KASS"] then
         ОбновитьПривязкуАналитикиДобавлением(ОбновляемыеЗаписи[i],["ДЕБЕТ","КРЕДИТ","ГРУППА","НАИМЕНОВАНИЕ","ОБЯЗАТ","ТИП"],["?20134*","?20134*","КОСГУ","Код КОСГУ",True,"0"]);
      end;
      if ОбновляемыеЗаписи[i]="ANALIT.ANALIT_BANK" or ОбновляемыеЗаписи[i]="ANALIT.ANALIT_M_BOOK" then
        QOsInf=OpenWorcQuery(ОбновляемыеЗаписи[i],"ГРУППА","ГРУППА='ДопРегКласс'");
        if CountSmart(QOsInf)=0 then
         ОбновитьПривязкуАналитикиДобавлением(ОбновляемыеЗаписи[i],["ДЕБЕТ","КРЕДИТ","ГРУППА","НАИМЕНОВАНИЕ","ОБЯЗАТ","ТИП"],["?30211*","?30211*","ДопРегКласс","Дополнительная рег.классификация",ложь,"0"]);
         ОбновитьПривязкуАналитикиДобавлением(ОбновляемыеЗаписи[i],["ДЕБЕТ","КРЕДИТ","ГРУППА","НАИМЕНОВАНИЕ","ОБЯЗАТ","ТИП"],["?30212*","?30212*","ДопРегКласс","Дополнительная рег.классификация",ложь,"0"]);
         ОбновитьПривязкуАналитикиДобавлением(ОбновляемыеЗаписи[i],["ДЕБЕТ","КРЕДИТ","ГРУППА","НАИМЕНОВАНИЕ","ОБЯЗАТ","ТИП"],["?30213*","?30213*","ДопРегКласс","Дополнительная рег.классификация",ложь,"0"]);
         ОбновитьПривязкуАналитикиДобавлением(ОбновляемыеЗаписи[i],["ДЕБЕТ","КРЕДИТ","ГРУППА","НАИМЕНОВАНИЕ","ОБЯЗАТ","ТИП"],["?30225*","?30225*","ДопРегКласс","Дополнительная рег.классификация",ложь,"0"]);
         ОбновитьПривязкуАналитикиДобавлением(ОбновляемыеЗаписи[i],["ДЕБЕТ","КРЕДИТ","ГРУППА","НАИМЕНОВАНИЕ","ОБЯЗАТ","ТИП"],["?30226*","?30226*","ДопРегКласс","Дополнительная рег.классификация",ложь,"0"]);
         ОбновитьПривязкуАналитикиДобавлением(ОбновляемыеЗаписи[i],["ДЕБЕТ","КРЕДИТ","ГРУППА","НАИМЕНОВАНИЕ","ОБЯЗАТ","ТИП"],["?30403*","?30403*","ДопРегКласс","Дополнительная рег.классификация",ложь,"0"]);
         ОбновитьПривязкуАналитикиДобавлением(ОбновляемыеЗаписи[i],["ДЕБЕТ","КРЕДИТ","ГРУППА","НАИМЕНОВАНИЕ","ОБЯЗАТ","ТИП"],["?30301*","?30301*","ДопРегКласс","Дополнительная рег.классификация",ложь,"0"]);
         ОбновитьПривязкуАналитикиДобавлением(ОбновляемыеЗаписи[i],["ДЕБЕТ","КРЕДИТ","ГРУППА","НАИМЕНОВАНИЕ","ОБЯЗАТ","ТИП"],["?30302*","?30302*","ДопРегКласс","Дополнительная рег.классификация",ложь,"0"]);
         ОбновитьПривязкуАналитикиДобавлением(ОбновляемыеЗаписи[i],["ДЕБЕТ","КРЕДИТ","ГРУППА","НАИМЕНОВАНИЕ","ОБЯЗАТ","ТИП"],["?30306*","?30306*","ДопРегКласс","Дополнительная рег.классификация",ложь,"0"]);
         ОбновитьПривязкуАналитикиДобавлением(ОбновляемыеЗаписи[i],["ДЕБЕТ","КРЕДИТ","ГРУППА","НАИМЕНОВАНИЕ","ОБЯЗАТ","ТИП"],["?30307*","?30307*","ДопРегКласс","Дополнительная рег.классификация",ложь,"0"]);
         ОбновитьПривязкуАналитикиДобавлением(ОбновляемыеЗаписи[i],["ДЕБЕТ","КРЕДИТ","ГРУППА","НАИМЕНОВАНИЕ","ОБЯЗАТ","ТИП"],["?30308*","?30308*","ДопРегКласс","Дополнительная рег.классификация",ложь,"0"]);
         ОбновитьПривязкуАналитикиДобавлением(ОбновляемыеЗаписи[i],["ДЕБЕТ","КРЕДИТ","ГРУППА","НАИМЕНОВАНИЕ","ОБЯЗАТ","ТИП"],["?30310*","?30311*","ДопРегКласс","Дополнительная рег.классификация",ложь,"0"]);
        end;
      end;
      if CountSmart(OpenWorcQuery(ОбновляемыеЗаписи[i],"ГРУППА","ГРУППА='ДохФомс'"))<>0 then
         C = FindClass(ОбновляемыеЗаписи[i]);
         Библ.процфунк.фнУдалитьЗаписи(C,"ГРУППА='ДохФомс'");
      end;
      if CountSmart(OpenWorcQuery(ОбновляемыеЗаписи[i],"ГРУППА","ГРУППА='РасхФомс'"))<>0 then
         C = FindClass(ОбновляемыеЗаписи[i]);
         Библ.процфунк.фнУдалитьЗаписи(C,"ГРУППА='РасхФомс'");
      end;
      if CountSmart(OpenWorcQuery(ОбновляемыеЗаписи[i],"ГРУППА","ГРУППА='ВидФомс'"))<>0 then
         C = FindClass(ОбновляемыеЗаписи[i]);
         Библ.процфунк.фнУдалитьЗаписи(C,"ГРУППА='ВидФомс'");
      end;
    end;

--        Match(НАИМЕНОВАНИЕ, "*получение наличных средств в кассу*") и Инстр174Н и Match(ГРУП, "*Операции по банковским счетам( в органе организующем исполнение бюджета)*")
    if CountSmart(OpenWorcQuery("OPR.OPR_BANK","","Match(НАИМЕНОВАНИЕ, '*получение наличных средств в кассу*') и Инстр174Н и Match(ГРУП, 'Операции по банковским счетам( в органе организующем исполнение бюджета)')"))=0 then
        ОбновитьПривязкуАналитикиДобавлением("OPR.OPR_BANK",["ГРУП","НАИМЕНОВАНИЕ","ФАЙЛЖУРНАЛА","ТипЖУР",
        "ДСЧ","КСЧ","ДСЧ1","КСЧ1","Инстр174Н","ВТОРЗАП1","АВТАНАЛИТ1","АВТАНАЛИТ2","АВТАНАЛИТ3","АВТАНАЛИТ4","АВТАНАЛИТ5","АВТАНАЛИТ6"],
        ["Операции по банковским счетам( в органе организующем исполнение бюджета)",
        "Списание средств с банковских счетов на получение наличных средств в кассу","Bnk_sp_s",1,";?20134510*|?21003560*",";?201?1610|?201?7610",
        ";0000",";18_?",Истина,Истина,Истина,Истина,Истина,Истина,Истина,Истина]);
        ВосстановлениеБазы.НастройкаГрупЗаписейКартотекНа148Н;
    end;
    if CountSmart(OpenWorcQuery("OPR.OPR_BANK","","Match(НАИМЕНОВАНИЕ, '*в пути*') и Match(ДСЧ1, '*17_3_*')"))<>0 
       or CountSmart(OpenWorcQuery("OPR.OPR_BANK","","Match(НАИМЕНОВАНИЕ, '*в пути*') и Match(КСЧ1, '*17_3_*')"))<>0 
       or CountSmart(OpenWorcQuery("OPR.OPR_KASS","","Match(НАИМЕНОВАНИЕ, '*в пути*') и Match(КСЧ1, '*18_3_*')"))<>0 then
     Q1 = Query.Create([OPR.OPR_BANK]);
     Q1.LoadingFieldsMode = СИС2.Константы.mdNone;
     Q1.Select;
     if Q1.Count <> 0 then
      while not Q1.EOF do
       if (Match(Q1.current.ДСЧ1, '*17_3_*') or Match(Q1.current.КСЧ1, '*17_3_*')) then
        Q1.current.Edit;
        Q1.current.ДСЧ1=ЗаменитьвСтроке(Q1.current.ДСЧ1,"17_3_2","17_3_?");
        Q1.current.КСЧ1=ЗаменитьвСтроке(Q1.current.КСЧ1,"17_3_2","17_3_?");
        Q1.current.КСЧ1=ЗаменитьвСтроке(Q1.current.КСЧ1,"18_3_2","18_3_?");
        Q1.current.Post;
       end;
      Q1.Next;
      Od;
     end;
     Q1.Close;
     Q1 = Query.Create([OPR.OPR_KASS]);
     Q1.LoadingFieldsMode = СИС2.Константы.mdNone;
     Q1.Select;
     if Q1.Count <> 0 then
      while not Q1.EOF do
       if Match(Q1.current.ДСЧ1, '*17_3_*') or Match(Q1.current.КСЧ1, '*17_3_*') then
        Q1.current.Edit;
        Q1.current.ДСЧ1=ЗаменитьвСтроке(Q1.current.ДСЧ1,"17_3_2","17_3_?");
        Q1.current.КСЧ1=ЗаменитьвСтроке(Q1.current.КСЧ1,"17_3_2","17_3_?");
        Q1.current.КСЧ1=ЗаменитьвСтроке(Q1.current.КСЧ1,"18_3_2","18_3_?");
        Q1.current.Post;
       elsif Match(Q1.current.ДСЧ, '*20134*') then
        Q1.current.Edit;
        if (not Match(Q1.current.ДСЧ1,";0000|17К|18К") or not Match(Q1.current.КСЧ1,";0000")) and not Q1.current.Доб_Польз then
        Q1.current.ДСЧ1=";0000|17К|18К";
        Q1.current.КСЧ1=";0000";
        Q1.current.ВТОРЗАП1=истина;
        end;
        Q1.current.Post;
       elsif Match(Q1.current.КСЧ, '*20134*') then
        Q1.current.Edit;
        if not Match(Q1.current.КСЧ1,";0000|17К|18К") or not Match(Q1.current.КСЧ1,";0000") and not Q1.current.Доб_Польз then
        Q1.current.КСЧ1=";0000|17К|18К";
        Q1.current.ДСЧ1=";0000";
        Q1.current.ВТОРЗАП1=истина;
        end;
        Q1.current.Post;
       end;
      Q1.Next;
      Od;
     end;
     Q1.Close;
    end;
    if (CountSmart(OpenWorcQuery("OPR.OPR_BANK","","Match(ДСЧ, '*20113*')"))<>0
       or CountSmart(OpenWorcQuery("OPR.OPR_BANK","","Match(КСЧ, '*20113*')"))<>0) then
     Q1 = Query.Create([OPR.OPR_BANK]);
     Q1.LoadingFieldsMode = СИС2.Константы.mdNone;
     Q1.Select;
     if Q1.Count <> 0 then
      while not Q1.EOF do
       if (Match(Q1.current.ДСЧ, '*20113*') or Match(Q1.current.КСЧ, '*20113*')) and Q1.current.Инстр174Н and not Q1.current.Доб_Польз  then
        Q1.current.Edit;
        Q1.current.ДСЧ=ЗаменитьвСтроке(Q1.current.ДСЧ,"20113","201?3");
        Q1.current.КСЧ=ЗаменитьвСтроке(Q1.current.КСЧ,"20113","201?3");
        Q1.current.Post;
       end;
      Q1.Next;
      Od;
     end;
     Q1.Close;
    end;
    if CountSmart( OpenWorcQuery("SLUG.ZAKR_GOD","","(МаскаСЧЕТ<>'')and(ТипСЧЕТ<>'')") )=0 
       or CountSmart( OpenWorcQuery("SLUG.ZAKR_GOD","","(МаскаСЧЕТ='Забаланс.Продукты')and(ТипСЧЕТ<>'ЗабалансМФ')") )=0 then
      ВосстановлениеБазы.ЗагрузитьСправЗакрГод;
    end;

      QOsInf=OpenWorcQuery("OPR.OPR_OS","","Match(НАИМЕНОВАНИЕ, '*(двойная проводка)*') и Match(КСЧ1, '*410*')и isGroup = 0");
      if CountSmart(QOsInf)<>0 then
       QOsInf.Last;
       while QOsInf.BOF <> TRUE  do
       QOsInf.current.Edit;
       QOsInf.Current.SetField("КСЧ1", ";?106?1310|?106?2320|?106?3330");
       QOsInf.current.Post;
       QOsInf.Previous;
       end;
      end;
      if CountSmart(OpenWorcQuery("SPRAV.KAR_OS","","isGroup = 0 и Match(СЧЕТ_БезКБК, '?????????') и ВидНФА = 0"))<>0 then
        ВосстановлениеБазы.АвтободборВидовНФАДляОС;
      end;
      if CountSmart(OpenWorcQuery("SPR.BUD_OB","","КОД_ДОГ<>nil and КОД_ДОГ.СПОСОБ<>0 and КОД_ДОГ.СПОСОБ<>4 and ВидОбязательства<>1 and Проводить"))<>0 then
        ВосстановлениеБазы.КорректировкаПринимаемыхОбязательств;
      end;
--      БЮДЖЕТ_БУХГАЛТЕРИЯ.СЕРВИС.БлСервисныеФункции.ДобавлениеАналитикиКорректировкаБО;
--      УточнитьДляПервички(МинимальнаяДатаПроводки,МаксимальнаяДатаПроводки,"ЗабалансМФ,БЮДЖЕТ","*","",["Сумма","Количество"],истина);

----------------------------------------------------------

    if ПроцессЗагрузкиПрерван then
      return;
    end;
    try
      with СИС2.Сервис.блВосстановлениеБазы do
        ЗарегистрироватьГруппуМетодовВосстановленияБазы   ('Справочники', вибСправочник);
        ЗарегистрироватьМетодВосстановленияБазыСНастройкой(вибСправочник, 'Загрузка (обновление) справочников',
                                                           ПолучитьИнфоМетода(ВосстановлениеБазы, 'Загрузить_Справочники'),
                                                           ПолучитьИнфоМетода(ВосстановлениеБазы, 'Настроить_Справочники'),
                                                           'Загрузка (обновление) справочников');
      end;

      -- регистрация процедур восстановления информационной базы

     ДобавитьЭлементВосстановления(Сервис.блВосстановлениеБазы.вибСправочник, "БюджетБухгалтерия", 'Счета бухгалтерского учета',,,         ПолучитьИнфоМетода(ВосстановлениеБазы,         'Загрузить_Счета'));
     ДобавитьЭлементВосстановления(Сервис.блВосстановлениеБазы.вибСправочник, "БюджетБухгалтерия", 'Доходы по инстр190Н',,,ПолучитьИнфоМетода(ВосстановлениеБазы, 'Загрузить_Доходы'));
     ДобавитьЭлементВосстановления(Сервис.блВосстановлениеБазы.вибСправочник, "БюджетБухгалтерия", 'Источники по инстр190Н',,,ПолучитьИнфоМетода(ВосстановлениеБазы, 'Загрузить_Источники'));
     ДобавитьЭлементВосстановления(Сервис.блВосстановлениеБазы.вибСправочник, "БюджетБухгалтерия", 'Расходы ФКР по инстр190Н',,,ПолучитьИнфоМетода(ВосстановлениеБазы, 'Загрузить_Расходы1'));
     ДобавитьЭлементВосстановления(Сервис.блВосстановлениеБазы.вибСправочник, "БюджетБухгалтерия", 'Расходы КЦСР по инстр190Н',,,ПолучитьИнфоМетода(ВосстановлениеБазы, 'Загрузить_Расходы2'));
     ДобавитьЭлементВосстановления(Сервис.блВосстановлениеБазы.вибСправочник, "БюджетБухгалтерия", 'Расходы КВР по инстр190Н',,,ПолучитьИнфоМетода(ВосстановлениеБазы, 'Загрузить_Расходы3'));
     ДобавитьЭлементВосстановления(Сервис.блВосстановлениеБазы.вибСправочник, "БюджетБухгалтерия", 'Виды имущества',,,ПолучитьИнфоМетода(ВосстановлениеБазы, 'Загрузить_ВидИмущества'));
     ДобавитьЭлементВосстановления(Сервис.блВосстановлениеБазы.вибСправочник, "БюджетБухгалтерия", 'Настройка ЕПС',,,ПолучитьИнфоМетода(ВосстановлениеБазы, 'Загрузить_ЕдиныйПлСчетов'));
     ДобавитьЭлементВосстановления(Сервис.блВосстановлениеБазы.вибСправочник, "БюджетБухгалтерия", 'Таблица соответствия',,,ПолучитьИнфоМетода(ВосстановлениеБазы, 'Загрузить_ТаблСоотв'));
     ДобавитьЭлементВосстановления(Сервис.блВосстановлениеБазы.вибСправочник, "БюджетБухгалтерия", 'Соответствие по инстр174Н',,,ПолучитьИнфоМетода(ВосстановлениеБазы, 'Загрузить_ТаблСоотв174н'));
     ДобавитьЭлементВосстановления(Сервис.блВосстановлениеБазы.вибСправочник, "БюджетБухгалтерия", 'Виды учреждений',,,ПолучитьИнфоМетода(ВосстановлениеБазы, 'Загрузить_ВидыУчрежд'));
     ДобавитьЭлементВосстановления(Сервис.блВосстановлениеБазы.вибСправочник, "БюджетБухгалтерия", 'Параметры закрытия года',,,ПолучитьИнфоМетода(ВосстановлениеБазы, 'ЗагрузитьСправЗакрГод'));
     ДобавитьЭлементВосстановления(Сервис.блВосстановлениеБазы.вибСправочник, "БюджетБухгалтерия", 'Контрольные соотношения МДК',,,ПолучитьИнфоМетода(ВосстановлениеБазы, 'ЗагрузитьКонтрольныеСоотн'));
     ДобавитьЭлементВосстановления(Сервис.блВосстановлениеБазы.вибСправочник, "БюджетБухгалтерия", 'Доходы по инстр 65Н',,,ПолучитьИнфоМетода(ВосстановлениеБазы, 'ЗагрузитьКБК65Н'));
     ДобавитьЭлементВосстановления(Сервис.блВосстановлениеБазы.вибСправочник, "БюджетБухгалтерия", 'Источники по инстр 65Н',,,ПолучитьИнфоМетода(ВосстановлениеБазы, 'ЗагрузитьКБК65Н'));
     ДобавитьЭлементВосстановления(Сервис.блВосстановлениеБазы.вибСправочник, "БюджетБухгалтерия", 'Расходы ФКР по инстр 65Н',,,ПолучитьИнфоМетода(ВосстановлениеБазы, 'ЗагрузитьКБК65Н'));
     ДобавитьЭлементВосстановления(Сервис.блВосстановлениеБазы.вибСправочник, "БюджетБухгалтерия", 'Расходы КЦСР по инстр 65Н',,,ПолучитьИнфоМетода(ВосстановлениеБазы, 'ЗагрузитьКБК65Н'));
     ДобавитьЭлементВосстановления(Сервис.блВосстановлениеБазы.вибСправочник, "БюджетБухгалтерия", 'Расходы КВР по инстр 65Н',,,ПолучитьИнфоМетода(ВосстановлениеБазы, 'ЗагрузитьКБК65Н'));
     ДобавитьЭлементВосстановления(Сервис.блВосстановлениеБазы.вибСправочник, "БюджетБухгалтерия", 'Дополнительная региональная классификация',,,ПолучитьИнфоМетода(ВосстановлениеБазы, 'ЗагрузитьСправДопРегКласс'));

     if НоваяИнформационнаяБазаДляПроекта(ClassProject, БюджетБухгалтерия.Константы.ИмяВерсииПроекта,БюджетБухгалтерия.Константы.ПолучитьВерсиюПроекта, локВерсияПроектаИзИнформационнойБазы) then
     end;
    except
      ПроцессЗагрузкиПрерван = True;
      raise;
    end;
  end;

  proc Init;
    var локВерсияПроектаИзИнформационнойБазы :Numeric;

    if ПроцессЗагрузкиПрерван then
      return;
    end;
   try

      ПроверитьНаличиеПравАдминистратора;
      ЗарегистрироватьСхемуДоступа(ClassProject, 'АдминистраторБюджетБух', 'Настройщик/администратор', 'Интерфейсные схемы\БЮДЖЕТ_БУХГАЛТЕРИЯ.shi');
      ЗарегистрироватьСхемуДоступа(ClassProject, 'Default', 'Рядовой пользователь', 'Интерфейсные схемы\БЮДЖЕТ_БУХГАЛТЕРИЯ.shi');
      ЗарегистрироватьСхемуДоступа(ClassProject, 'Auto','Робот автоматических расчетов', '');

    Бланк_ПоказПроводок                     = БЮДЖЕТ_БУХГАЛТЕРИЯ.Сервис.блПроводки_Журналы;
    Бланк_РедакторДопАналитики  = БЮДЖЕТ_БУХГАЛТЕРИЯ.Сервис.ОбщиеСервисы.редРедакторДопАналитики;
    Бланк_Ф0306001= БЮДЖЕТ_БУХГАЛТЕРИЯ.ОС.БлАктПриемПередачаОС001;
--    Бланк_РедакторДопАналитики2 = БЮДЖЕТ_БУХГАЛТЕРИЯ.Сервис.ОбщиеСервисы.редРедакторДопАналитики2;

    Библио.ЗаполнитьПараметрыЖурналов;
    Библио.ПараметрыПоДомену;
    if НоваяИнформационнаяБазаДляПроекта(ClassProject, БюджетБухгалтерия.Константы.ИмяВерсииПроекта,
      БюджетБухгалтерия.Константы.ПолучитьВерсиюПроекта, локВерсияПроектаИзИнформационнойБазы) then
      try

      ПроверитьНаличиеПравАдминистратора;
      ЗарегистрироватьСхемуДоступа(ClassProject, 'АдминистраторБюджетБух', 'Настройщик/администратор', 'Интерфейсные схемы\БЮДЖЕТ_БУХГАЛТЕРИЯ.shi');
      ЗарегистрироватьСхемуДоступа(ClassProject, 'Default', 'Рядовой пользователь', 'Интерфейсные схемы\БЮДЖЕТ_БУХГАЛТЕРИЯ.shi');
      ЗарегистрироватьСхемуДоступа(ClassProject, 'Auto','Робот автоматических расчетов','');

      Бланк_ПоказПроводок                     = БЮДЖЕТ_БУХГАЛТЕРИЯ.Сервис.блПроводки_Журналы;
      Бланк_Ф0306001= БЮДЖЕТ_БУХГАЛТЕРИЯ.ОС.БлАктПриемПередачаОС001;
      СхемаДоступаПоУмолчанию = 'АдминистраторБюджетБух';
        ПроверитьКритичныеНастройки;
        Библио.ЗаполнитьПараметрыЖурналов;
   --     Библио.СписокЖурналов;

        -- **************** блок конвертации старых данных ******************************
        -- пожалуйста, ставьте дату внесения изменений, чтобы можно было вовремя удалять конвертацию
        -- *******************************************************************************


        -- **************** блок конвертации старых данных ******************************
        -- пожалуйста, ставьте дату внесения изменений, чтобы можно было вовремя удалять конвертацию
        -- *******************************************************************************
        УстановитьНовуюВерсиюИнформационннойБазыДляПроекта(ИмяВерсииПроекта, ПолучитьВерсиюПроекта);
      except
        Message('Ошибка при конвертации.');
      end;
    end;
    except
      ПроцессЗагрузкиПрерван = True;
      raise;
   end;
    СИС2.ХранимыеНастройки.ИмяРабочейПапки = SessionInfo.MyDocumentsFolder + 'Турбо_9\';
  end;


  proc GetSessionInfo;
    AddSessionInfo(ЗаголовокИнформацииОРелизах, 'Версия проекта '+ClassProject+' : '+Str(БюджетБухгалтерия.Константы.ПолучитьВерсиюПроекта, '0.000'));
  end;


InClass Private

  -- Возвращает номер версии проекта с учетом этапа разработки
  func СформироватьВерсиюВыпускаПроекта( const aProjectName :String ) :Integer;
    var locStafeNum :Integer;

    locStafeNum = BaseInfo.ProjectByName[aProjectName].SubCode;
    Result = locStafeNum;
  end;

  --@doc возвращает 0, если запрос пуст, 1, если в нем
  --@doc единственная запись, и 2, если там более чем одна запись
  --@doc т.е. для результата данной функции имеют смысл проверки
  --@doc типа = 0, = 1 и > 1.
  func КоличествоСчетовБыстро(аМаска:String):Integer;
   var aQuery: Query;

     -- Match(Имя, "*110107000*")
      aQuery       = Query.Create([Kernel.Счета]);
      aQuery.Order = 'Имя';
      aQuery.Filter = СложитьСтрокиФильтраПоИ(["План='БЮДЖЕТ'",аМаска]);
      aQuery.Select;

    if (aQuery.EOF and aQuery.BOF) then
      Result = 0;
    else
      aQuery.First;
      aQuery.Next;
      Result = If(aQuery.EOF, 1, 2);
      aQuery.Previous;
    end;
  end;


  func ДатаФайлаПроекта:Date;
  var Size  : Integer;
  var ADate : Date;
  var Attr  : Integer;
  Var ДатаПроекта:Date;

   GetFileInfo(BaseInfo.ProjectByName[Self.ClassProject].Folder + BaseInfo.ProjectByName[Self.ClassProject].Name + ".#prj",Size, ADate, Attr);
   ДатаПроекта=CreateDate(Day(aDate),Mon(aDate),Год(aDate));
   Result = ДатаПроекта;
  end;

  proc ПроверитьКритичныеНастройки;

  end;


  proc ПроверитьНаличиеПравАдминистратора1;
    var vQuery_User, vQuery_Right :Query;

    vQuery_User        = Query.Create([Kernel.Settings.User]);
    vQuery_User.Filter = "Name = 'Администратор'";
    vQuery_User.Select;

    vQuery_Right        = Query.Create([Kernel.Settings.Role]);
    vQuery_Right.Filter = "Name = 'АдминистраторБюджетБух'";
    vQuery_Right.Select;

    if vQuery_User.EOF or vQuery_Right.EOF then -- Нет ни одного администратора или прав администратора
      Importer.Create.ImportFromFile(BaseInfo.ProjectByName[Self.ClassProject].Folder + 'Shared\Import\Пользователи и права.tbc', 'tbc');
      --ОбновлениеПравАдминистратора;
    end;
  end;

  proc ПроверитьНаличиеПравАдминистратора;
    with Query.Create([Settings.User]) do
      Select;
      if EOF then -- Нет ни одного юзера
        Importer.Create.ImportFromFile(BaseInfo.ProjectByName[Self.ClassProject].Folder + 'Shared\Import\Пользователи системы.tbc', 'tbc');
        Message('В информационной базе не было настроек для пользователя Администратор и его прав доступа по ' +
          'умолчанию. Эта информация добавлена. Перезапустите сессию, чтобы новые настройки вступили в силу.');
      end;
    end;
  end;

End
